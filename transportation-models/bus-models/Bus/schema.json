{
  "$schema": "http://json-schema.org/schema#",
  "$schemaVersion": "0.2.1",
  "modelTags": "IUDX",
  "$id": "https://github.com/SAMSGBLab/iotspaces-DataModels/tree/main/transportation-models/bus-models/Bus/schema.json",
  "title": "Bus Entity",
  "description": "Bus entity model described on Smart City Bus Paper.",
  "type": "Bus",
  "name": "Centre Bus Roma 3",
  "category": {
    "type": "array",
    "description": "Property. Bus category(ies) from an external point of view. Enum:'municipalServices, nonTracked, private, public, specialUsage, tracked'. Tracked vehicles are those vehicles which position is permanently tracked by a remote system. Or any other needed by an application They incorporate a GPS receiver together with a network connection to periodically update a reported position (location, speed, heading ...).",
    "items": {
      "type": "string",
      "enum": [
        "municipalServices",
        "nonTracked",
        "private",
        "public",
        "specialUsage",
        "tracked"
      ]
    }
  },
  "previousLocation": {
    "$ref": "https://smart-data-models.github.io/data-models/common-schema.json#/definitions/Location-Commons/properties/location"
  },

  "cargoWeight": {
    "type": "number",
    "description": "Property. Current weight of the vehicle's cargo. Model:'https://schema.org/Number'. Units:'Kilograms'",
    "minimum": 0,
    "exclusiveMinimum": true
  },
  "vehiclePlateIdentifier": {
    "type": "string",
    "description": "Property.  An identifier or code displayed on a vehicle registration plate attached to the vehicle used for official identification purposes. The registration identifier is numeric or alphanumeric and is unique within the issuing authority's region. Model:'https://schema.org/Text'. Normative References: DATEXII `vehicleRegistrationPlateIdentifier`"
  },
  "fleetVehicleId": {
    "type": "string",
    "description": "Property. The identifier of the vehicle in the context of the fleet of vehicles to which it belongs. Model:'https://schema.org/Text'."
  },
  "dateVehicleFirstRegistered": {
    "type": "string",
    "format": "date",
    "description": "Property. The date of the first registration of the vehicle with the respective public authorities. Model:'https://schema.org/dateVehicleFirstRegistered'."
  },
  "dateFirstUsed": {
    "type": "string",
    "format": "date",
    "description": "Property. Timestamp which denotes when the vehicle was first used. Model:'https://schema.org/DateTime'."
  },
  "purchaseDate": {
    "type": "string",
    "format": "date-time",
    "description": "Property. The date the item e.g. vehicle was purchased by the current owner. Model:'https://schema.org/purchaseDate'."
  },
  "mileageFromOdometer": {
    "type": "number",
    "description": "Property. The total distance travelled by the particular vehicle since its initial production, as read from its odometer. Model:'https://schema.org/mileageFromOdometer'."
  },
  "vehicleConfiguration": {
    "type": "string",
    "description": "Property. A short text indicating the configuration of the vehicle, e.g. '5dr hatchback ST 2.5 MT 225 hp' or 'limited edition'. Model:'https://schema.org/vehicleConfiguration'."
  },

  "feature": {
    "type": "array",
    "description": "Property. Feature(s) incorporated by the vehicle. Model:'https://schema.org/Text'. Enum:' abs, airbag, alarm, backCamera, disabledRamp, gps, internetConnection, overspeed, proximitySensor, wifi'. Or any other needed by the application. In order to represent multiple instances of a feature it can be used the following syntax: `<feature>,<occurences>`. For example, a car with 4 airbags will be represented by `airbag,4`.",
    "items": {
      "type": "string",
      "enum": [
        "abs",
        "airbag",
        "alarm",
        "backCamera",
        "disabledRamp",
        "gps",
        "internetConnection",
        "overspeed",
        "proximitySensor",
        "wifi"
     ]
    }
  },
  "serviceStatus": {
    "type": "string",
    "description": "Property. Vehicle status (from the point of view of the service provided, so it could not apply to private vehicles). Model:'https://schema.org/DateTime'. `parked` : Vehicle is parked and not providing any service at the moment. `onRoute` : Vehicle is performing a mission. A comma-separated modifier(s) can be added to indicate what mission is currently delivering the vehicle. For instance `onRoute,garbageCollection` can be used to denote that the vehicle is on route and in a garbage collection mission. 'broken' : Vehicle is suffering a temporary breakdown. `outOfService` : Vehicle is on the road but not performing any mission, probably going to its parking area. Enum:'broken, onRoute, outOfService, parked'",
    "enum": [
      "broken",
      "onRoute",
      "outOfService",
      "parked"
    ]
  },
  "bearing": {
    "type": "number",
    "description": "Property. Model:'https://schema.org/Number'. Gives the vehicle GPS angle measured in a clockwise direction from the True North. SameAs 'bearing' field from GTFS Realtime message-Position(https://developers.google.com/transit/gtfs-realtime/reference#message-position)"
  },
  "wardId": {
    "type": "string",
    "description": "Property. Model:'https://schema.org/Text'. Ward ID of the entity corresponding to this observation."
  },
  "ignitionStatus": {
    "type": "boolean",
    "description": "Property. Model:'https://schema.org/Boolean'. Gives the ignition status of the vehicle. True means ignited"
  },
  "vehicleRunningStatus": {
    "type": "string",
    "enum": [
      "running",
      "stopped",
      "waiting"
     ],
     "description": "Property. Model:'https://schema.org/Text'. Gives the Battery charging status of the reporting device. Enum:'running, waiting, stopped'."
  },
  "zoneName": {
    "type": "string",
    "description": "Property. Model:'https://schema.org/Text'. Zone name of the entity corresponding to this observation"
  },
  "vehicleAltitude": {
          "type": "string",
          "description": "Property. Model:'https://schema.org/Text'. Gives the current altitude of the vehicle using GPS"
  },
  "observationDateTime": {
    "type": "string",
    "format": "date-time",
    "description": "Property. Model:'https://schema.org/DateTime'. Last reported time of observation"
  },
  "deviceSimNumber": {
    "type": "string",
    "description": "Property. Model:'https://schema.org/Text'. Gives the SIM number of the device in the vehicle."
  },
  "wardName": {
    "type": "string",
    "description": "Property. Model:'https://schema.org/Text'. Ward name of the entity corresponding to this observation."
  },
  "reportId": {
    "type": "string",
    "description": "Property. Model:'https://schema.org/Text'. Unique Id assigned for the issue or report or feedback or transaction corresponding to this observation."
  },
  "vehicleTrackerDevice": {
    "type": "string",
    "description": "Property. Model:'https://schema.org/Text'. Installation status of the GPS device or the tracking device fitted to the vehicle corresponding to this observation."
  },
  "fuelFilled": {
    "type": "number",
    "description": "Property. Model:'https://schema.org/Number'. Amount of fuel filled in liters to the vehicle corresponding to this observation."
  },
  "fuelEfficiency": {
    "type": "number",
    "description": "Property. Model:'https://schema.org/Number'. The distance traveled per unit of fuel used, commonly in kilometers per liter (km/L)."
  },
  "fuelType": {
    "type": "string",
    "description": "Property. Model:'https://schema.org/Text'. The type of fuel suitable for the engine or engines of the vehicle corresponding to this observation."
  },
  "municipalityInfo": {
    "type": "object",
    "description": "Property. Model:'https://schema.org/Text. Municipality information corresponding to this observation.",
    "properties": {
      "district": {
        "type": "string",
        "description": "Property. Model:'https://schema.org/Text'. District name corresponding to this observation."
      },
      "ulbName": {
        "type": "string",
        "description": "Property. Model:'https://schema.org/Text'. Name of the Urban Local Body corresponding to this observation."
      },
      "cityId": {
        "type": "string",
        "description": "Property. Model:'https://schema.org/Text'. City ID corresponding to this observation."
      },
      "wardId": {
        "type": "string",
        "description": "Property. Model:'https://schema.org/Text'. Ward ID corresponding to this observation."
      },
      "stateName": {
        "type": "string",
        "description": "Property. Model:'https://schema.org/Text'. Name of the state corresponding to this observation."
      },
      "cityName": {
        "type": "string",
        "description": "Property. Model:'https://schema.org/Text'. City name corresponding to this observation"
      },
      "zoneName": {
        "type": "string",
        "description": "Property. Model:'https://schema.org/Text'. Zone name corresponding to this observation."
      },
      "zoneId": {
        "type": "string",
        "description": "Property. Model:'https://schema.org/Text'. Zone ID corresponding to this observation."
      },
      "wardName": {
        "type": "string",
        "description": "Property. Model:'https://schema.org/Text'. Ward name corresponding to this observation."
      },
      "wardNum": {
        "type": "number",
        "description": "Property. Model:'https://schema.org/Number'. Ward number corresponding to this observation."
      }
    }
  },

  "busExtend": {
	  "type": "Polygon",
	  "measurementUnit" : "km",
	  "dimensions": "2D",
	  "coordinates": [[[ 0 ,0 ] ,[ 18.125 ,0 ] ,[ 18.125 ,2.55 ] ,[ 0 ,2.55 ] ,[ 0 ,0 ]]] 
  },
  "hasAvailableAreas":[
	"urn:ngsild:Area:id:1",
	"urn:ngsild:Area:id:door1"
  ],
  "RefBusVehicle Model":["urn:ngsild:BusVehicleModel:YZX02"],
  "required": [
    "id",
    "type",
    "location",
    "category",
    "previousLocation",
    "name"
  ]
}
